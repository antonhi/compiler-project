
import java_cup.runtime.*;

terminal CLASS;           //2
terminal AND;             //3
terminal ELSE;            //4
terminal IF;              //5
terminal WHILE;           //6
terminal READ;            //7
terminal PRINT;           //8
terminal PRINTLN;         //9
terminal RETURN;          //10
terminal OR;              //11
terminal TIMES;           //12
terminal PLUS;            //13
terminal PLUSPLUS;        //14
terminal MINUS;           //15
terminal MINUSMINUS;      //16
terminal PREFIXPLUS;      //17
terminal PREFIXMINUS;     //18
terminal DIVIDE;          //19
terminal SEMI;            //20
terminal LEFT_PAREN;      //21
terminal RT_PAREN;        //22
terminal LEFT_BRACE;      //23
terminal RT_BRACE;        //24
terminal LEFT_BRKT;       //25
terminal RT_BRKT;         //26
terminal EQ;              //27
terminal GTR;             //28
terminal LESS;            //29
terminal LESS_EQ;         //30
terminal GTR_EQ;          //31
terminal NOT_EQ;          //32
terminal NOT;             //33
terminal CONDITION;       //34
terminal COLON;           //35
terminal ASSMNT;          //36
terminal COMMA;           //37
terminal FINAL;           //38
terminal VOID;            //39
terminal TRUE;            //40
terminal FALSE;           //41

terminal String INT;      //42
terminal String FLOAT;    //43
terminal String BOOL;     //44
terminal String CHAR;     //45

terminal String ID;       //46
terminal int INTLIT;      //47
terminal double FLOATLIT; //48
terminal String CHARLIT;  //49
terminal String STRINGLIT;//50

non terminal Program program;
non terminal Memberdecls memberdecls;
non terminal FielddeclList fielddecls;
non terminal MethoddeclList methoddecls;
non terminal Fielddecl fielddecl;
non terminal Methoddecl methoddecl;
non terminal Argdecls argdecls;
non terminal ArgdeclList argdeclslist;
non terminal Argdecl argdecl;
non terminal Statement statement;
non terminal StatementList statements;
non terminal IfEnd ifend;
non terminal Expression expression;
non terminal Name name;
non terminal ReadList readlist;
non terminal PrintList printlist;
non terminal PrintLineList printlinelist;
non terminal Args args;
non terminal Returntype returntype;
non terminal Type type;
non terminal Binaryop binaryop;
non terminal OptionalSemi optionalsemi;
non terminal OptionalFinal optionalfinal;
non terminal OptionalExpr optionalexpr;

precedence right CONDITION, COLON;
precedence left OR;
precedence left AND;
precedence left NOT_EQ, EQ;
precedence left LESS, GTR, LESS_EQ, GTR_EQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right MINUSMINUS, PLUSPLUS, NOT;

program ::= CLASS ID:id LEFT_BRACE memberdecls:m RT_BRACE
    {: RESULT = new Program(id, m); :}
    ;

memberdecls ::= fielddecls:f methoddecls:m
    {:RESULT = new Memberdecls(f, m);:}
    ;

fielddecls ::= fielddecl:f fielddecls:ff
    {:RESULT = ff.prepend(f);:}
    |
    {:RESULT = new FielddeclList();:}
    ;

methoddecls ::= methoddecl:m methoddecls:mm
    {:RESULT = mm.prepend(m);:}
    |
    {:RESULT = new MethoddeclList();:}
    ;

fielddecl ::= optionalfinal:of type:t ID:id optionalexpr:oe SEMI
    {:RESULT = new ExpressionFielddecl(of, t, id, oe);:}
    |
    type:t ID:id LEFT_BRKT INTLIT:il RT_BRKT
    {:RESULT = new ArrayFielddecl(t, id, il):}
    ;

methoddecl ::= returntype:rt ID:id LEFT_PAREN argdecls:a RT_PAREN LEFT_BRACE fielddecls:f statements:ss RT_BRACE optionalsemi:os
    {:RESULT = new Methoddecl(rt, id, a, f, ss, os);:}
    ;

argdecls ::= argdeclslist:a
    {:RESULT = new Argdecls(a);:}
    |
    {:RESULT = new Argdecls(null);:}
    ;

argdeclslist ::= argdecl:a COMMA argdeclslist:aa
    {:RESULT = aa.prepend(a);:}
    |
    argdecl:a
    {:RESULT = new ArgdeclList().prepend(a);:}
    ;

argdecl ::= type:t ID:id LEFT_BRKT RT_BRKT
    {:RESULT = new Argdecl(t, id, true);:}
    |
    type:t ID:id
    {:RESULT = new Argdecl(t, id, false);:}
    ;

statements ::= statement:s statements:ss
    {: RESULT = ss.prepend(s); :}
    |
    {: RESULT = new StatementList(); :}
    ;

statement ::= IF LEFT_PAREN expression:e RT_PAREN LEFT_BRACE fielddecls:f statements:ss RT_BRACE ifend:ie
    {:RESULT = new IfStatement(e, f, ss, ie);:}
    |
    WHILE:w LEFT_PAREN expression:e RT_PAREN LEFT_BRACE fielddecls:f statements:ss RT_BRACE
    {:RESULT = new WhileStatement(e, f, ss);:}
    |
    name:n ASSMNT expression:e SEMI
    {:RESULT = new AssignmentStatement(n, e);:}
    |
    READ LEFT_PAREN readlist:rl RT_PAREN SEMI
    {:RESULT = new ReadStatement(rl);:}
    |
    PRINT LEFT_PAREN printlist:pl RT_PAREN SEMI
    {:RESULT = new PrintStatement(pl);:}
    |
    PRINTLN LEFT_PAREN printlinelist:pll RT_PAREN SEMI
    {:RESULT = new PrintLineStatement(pll);:}
    |
    ID:id LEFT_PAREN RT_PAREN SEMI
    {:RESULT = new ConstructorStatement(id);:}
    |
    ID:id LEFT_PAREN args:a RT_PAREN SEMI
    {:RESULT = new ParameterConstructorStatement(id, a);:}
    |
    RETURN SEMI
    {:RESULT = new ReturnStatement();:}
    |
    RETURN expression:e SEMI
    {:RESULT = new ReturnExpressionStatement(e);:}
    |
    name:n PLUSPLUS SEMI
    {:RESULT = new AddStatement(n);:}
    |
    name:n MINUSMINUS SEMI
    {:RESULT = new SubtractStatement(n);:}
    |
    LEFT_BRACE fielddecls:f statements:ss RT_BRACE optionalsemi:o
    {:RESULT = new BodyStatement(f, ss, o);:}
    ;

ifend ::= ELSE LEFT_BRACE fielddecls:f statements:ss RT_BRACE
    {:RESULT = new IfEnd(f, ss);:}
    |
    {:RESULT = new IfEnd();:}
    ;

name ::= ID:id LEFT_BRKT expression:e RT_BRKT
    {:RESULT = new IdExpressionName(id, e);:}
    |
    ID:id
    {:RESULT = new IdName(id);:}
    ;

args ::= expression:e COMMA args:a
    {:RESULT = a.prepend(e);:}
    |
    expression:e
    {:RESULT = new Args().prepend(e);:}
    ;

readlist ::= name:n COMMA readlist:r
    {:RESULT = r.prepend(n);:}
    |
    name:n
    {:RESULT = new ReadList().prepend(n);:}
    ;

printlist ::= expression:e COMMA printlist:p
    {:RESULT = p.prepend(e);:}
    |
    expression:e
    {:RESULT = new PrintList().prepend(e);:}
    ;

printlinelist ::= printlist:p
    {:RESULT = new PrintLineList(p);:}
    |
    {:RESULT = new PrintLineList();:}
    ;

expression ::= name:n
    {:RESULT = new NameExpression(n);:}
    |
    ID:id LEFT_PAREN RT_PAREN
    {:RESULT = new ConstructorExpression(id);:}
    |
    ID:id LEFT_PAREN args:a RT_PAREN
    {:RESULT = new ParameterConstructorExpression(a, id);:}
    |
    INTLIT:i
    {:RESULT = new IntegerExpression(i);:}
    |
    CHARLIT:c
    {:RESULT = new CharacterExpression(c);:}
    |
    STRINGLIT:s
    {:RESULT = new StringExpression(s);:}
    |
    FLOATLIT:f
    {:RESULT = new FloatExpression(f);:}
    |
    TRUE
    {:RESULT = new TrueExpression();:}
    |
    FALSE
    {:RESULT = new FalseExpression();:}
    |
    LEFT_PAREN expression:e RT_PAREN
    {:RESULT = new NestedExpression(e);:}
    |
    NOT expression:e
    {:RESULT = new NotExpression(e);:}
    |
    MINUS expression:e
    {:RESULT = new NegateExpression(e);:}%prec PREFIXMINUS
    |
    PLUS expression:e
    {:RESULT = new PositiveExpression(e);:}%prec PREFIXPLUS
    |
    LEFT_PAREN type:t RT_PAREN expression:e
    {:RESULT = new CastExpression(t, e);:}
    |
    expression:eone binaryop:b expression:etwo
    {:RESULT = new BinaryExpression(eone, etwo, b);:}
    |
    LEFT_PAREN expression:eone CONDITION expression:etwo COLON expression:ethree RT_PAREN
    {:RESULT = new TertiaryExpression(eone, etwo, ethree);:}
    ;

binaryop ::= TIMES:t
    {:RESULT = new Binaryop((String)t);:}
    |
    DIVIDE:d
    {:RESULT = new Binaryop((String)d);:}
    |
    PLUS:p
    {:RESULT = new Binaryop((String)p);:}
    |
    MINUS:m
    {:RESULT = new Binaryop((String)m);:}
    |
    LESS:l
    {:RESULT = new Binaryop((String)l);:}
    |
    GTR:g
    {:RESULT = new Binaryop((String)g);:}
    |
    LESS_EQ:l
    {:RESULT = new Binaryop((String)l);:}
    |
    GTR_EQ:g
    {:RESULT = new Binaryop((String)g);:}
    |
    EQ:e
    {:RESULT = new Binaryop((String)e);:}
    |
    NOT_EQ:n
    {:RESULT = new Binaryop((String)n);:}
    |
    OR:o
    {:RESULT = new Binaryop((String)o);:}
    |
    AND:a
    {:RESULT = new Binaryop((String)a);:}
    ;

type ::= INT:i
    {:RESULT = new Type((String)i);:}
    |
    CHAR:c
    {:RESULT = new Type((String)c);:}
    |
    BOOL:b
    {:RESULT = new Type((String)b);:}
    |
    FLOAT:f
    {:RESULT = new Type((String)f);:}
    ;

returntype ::= type:t
    {:RESULT = new Returntype(t);:}
    |
    VOID
    {:RESULT = new Returntype(null);:}
    ;

optionalsemi ::= SEMI
    {:RESULT = new OptionalSemi(true);:}
    |
    {:RESULT = new OptionalSemi(false);:}
    ;

optionalfinal ::= FINAL
    {:RESULT = new OptionalFinal(true);:}
    |
    {:RESULT = new OptionalFinal(false);:}
    ;

optionalexpr ::= expression:e
    {:RESULT = new OptionalExpr(e);:}
    |
    {:RESULT = new OptionalExpr(null);:}
    ;
